# docker-compose.yml - Only for local debug purposes
# docker-compose up -d elasticsearch kibana jaeger camunda redis mongo mysql postgres pgadmin
version: '3.9'

services:
  mysql:
    image: mysql:5.7
    container_name: local-mysql
    restart: always
    ports:
      - '3306:3306'
    environment:
      TZ: 'America/Argentina/Buenos_Aires'
      MYSQL_ROOT_PASSWORD: 123456
      MYSQL_DATABASE: my_db
      MYSQL_PASSWORD: 123456

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.4
    container_name: local-elasticsearch
    restart: always
    ports:
      - '9200:9200'
    environment:
      - TZ=UTC
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
      - xpack.security.enabled=false
      - ELASTIC_PASSWORD=elastic
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    cap_add:
      - IPC_LOCK
    #volumes:
    #  - ./.elasticsearch-data:/usr/share/elasticsearch/data

  kibana:
    image: docker.elastic.co/kibana/kibana:8.13.4
    container_name: local-kibana
    restart: always
    ports:
      - '5601:5601'
    environment:
      TZ: 'America/Argentina/Buenos_Aires'
      SERVER_NAME: kibana
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    depends_on:
      - elasticsearch

  jaeger:
    container_name: local-jaeger
    image: jaegertracing/all-in-one:latest
    restart: always
    ports:
      - '6831:6831/udp'
      - '6832:6832/udp'
      - '5778:5778'
      - '16686:16686'
      - '4317:4317'
      - '4318:4318'
      - '14250:14250'
      - '14268:14268'
      - '14269:14269'
      - '9411:9411'
    environment:
      TZ: 'America/Argentina/Buenos_Aires'
      COLLECTOR_OTLP_ENABLED: 'true'
      #LOG_LEVEL: debug

  grafana:
    container_name: local-grafana
    image: grafana/grafana:latest
    restart: always
    ports:
      - '3000:3000'
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin

  dynamodb:
    image: amazon/dynamodb-local:latest
    container_name: local-dynamodb
    restart: always
    ports: 
      - "8000:8000"
    environment:
      AWS_ACCESS_KEY_ID: local
      AWS_SECRET_ACCESS_KEY: local
      AWS_REGION: us-east-1

  dynamodb-admin:
    image: aaronshaf/dynamodb-admin
    container_name: local-dynamodb-admin
    restart: always
    ports: 
      - "8001:8001"
    environment:
      DYNAMO_ENDPOINT: "http://dynamodb:8000/"
      AWS_ACCESS_KEY_ID: local
      AWS_SECRET_ACCESS_KEY: local
      AWS_REGION: us-east-1
      depends_on: dynamodb